import base64
import logging

from generator_domain.validator import Validator
from generator_domain.utils import font_size

from io import BytesIO

from PIL import Image, ImageFont, ImageDraw

logger = logging.getLogger(__name__)


class Generator(object):

    def __init__(self, **kwargs):
        self._validator = Validator()
        self._storage_adapter = kwargs.get("storage_adapter")

    def __call__(self, image_data):
        self._validator(image_data)
        return self._add_text(image_data)

    def _add_text(self, image_data):
            if not image_data.get('top_text') and not image_data.get('bottom_text'):
                return image_data
            else:

                width = image_data.get('width')
                height = image_data.get('height')
                margin = 20

                font = ImageFont.load(image_data.get('font').name)
                image = Image.open(BytesIO(base64.b64decode(image_data.get('base64'))))
                top_text = image_data.get('top_text')
                bottom_text = image_data.get('bottom_text')
                draw = ImageDraw.Draw(image)
                top_font_size = font_size(len(top_text), width)
                bottom_font_size = font_size(len(bottom_text), width)
                font_top = ImageFont.truetype(font, top_font_size)
                font_bottom = ImageFont.truetype(font, bottom_font_size)

                horizontal_top, _ = draw.textsize(top_text, font=font_top)
                horizontal_bottom, _ = draw.textsize(bottom_text, font=font_bottom)

                top_anchor = ((width - horizontal_top) / 2, margin)
                bottom_anchor = ((width - horizontal_bottom) / 2, height - margin - font_bottom.size)

                draw.text(top_anchor, top_text, (0, 0, 0), font=font_top)
                draw.text(bottom_anchor, bottom_text, (0, 0, 0), font=font_bottom)

                buffer = BytesIO()
                image.save(buffer, format="JPEG")
                image_processed = base64.b64encode(buffer.getvalue())
                image_data["base64"] = image_processed
                '''
                with open("test_image.jped", "wb") as testfile:
                    testfile.write(buffer.getvalue())
                '''

                return image_data
